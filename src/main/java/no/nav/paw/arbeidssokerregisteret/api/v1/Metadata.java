/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package no.nav.paw.arbeidssokerregisteret.api.v1;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/**
 * Inneholder metadata om en endring i arbeidssøkerregisteret.
 */
@org.apache.avro.specific.AvroGenerated
public class Metadata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -492285618009346418L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Metadata\",\"namespace\":\"no.nav.paw.arbeidssokerregisteret.api.v1\",\"doc\":\"Inneholder metadata om en endring i arbeidssøkerregisteret.\",\"fields\":[{\"name\":\"tidspunkt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Tidspunkt for endringen.\"},{\"name\":\"utfoertAv\",\"type\":{\"type\":\"record\",\"name\":\"Bruker\",\"doc\":\"En bruker er en person eller et system. Personer kan være sluttbrukere eller veiledere.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"BrukerType\",\"symbols\":[\"UKJENT_VERDI\",\"UDEFINERT\",\"VEILEDER\",\"SYSTEM\",\"SLUTTBRUKER\"],\"default\":\"UKJENT_VERDI\"},\"doc\":\"Angir hvilken type bruker det er snakk om\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Brukerens identifikator.\\nFor sluttbruker er dette typisk fødselsnummer eller D-nummer.\\nFor system vil det rett og slett være navnet på et system, eventuelt med versjonsnummer i tillegg (APP_NAVN:VERSJON).\\nFor veileder vil det være NAV identen til veilederen.\"}]}},{\"name\":\"kilde\",\"type\":\"string\",\"doc\":\"Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.\"},{\"name\":\"aarsak\",\"type\":\"string\",\"doc\":\"Aarasek til endringen. Feks \\\"Flyttet ut av landet\\\" eller lignende.\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<Metadata> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Metadata> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Metadata> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Metadata> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Metadata> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this Metadata to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a Metadata from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Metadata instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Metadata fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Tidspunkt for endringen.
     */
    private java.time.Instant tidspunkt;
    private Bruker utfoertAv;
    /**
     * Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.
     */
    private CharSequence kilde;
    /**
     * Aarasek til endringen. Feks "Flyttet ut av landet" eller lignende.
     */
    private CharSequence aarsak;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Metadata() {
    }

    /**
     * All-args constructor.
     *
     * @param tidspunkt Tidspunkt for endringen.
     * @param utfoertAv The new value for utfoertAv
     * @param kilde     Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.
     * @param aarsak    Aarasek til endringen. Feks "Flyttet ut av landet" eller lignende.
     */
    public Metadata(java.time.Instant tidspunkt, Bruker utfoertAv, CharSequence kilde, CharSequence aarsak) {
        this.tidspunkt = tidspunkt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.utfoertAv = utfoertAv;
        this.kilde = kilde;
        this.aarsak = aarsak;
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return tidspunkt;
            case 1:
                return utfoertAv;
            case 2:
                return kilde;
            case 3:
                return aarsak;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions =
            new org.apache.avro.Conversion<?>[]{
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    null,
                    null,
                    null,
                    null
            };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                tidspunkt = (java.time.Instant) value$;
                break;
            case 1:
                utfoertAv = (Bruker) value$;
                break;
            case 2:
                kilde = (CharSequence) value$;
                break;
            case 3:
                aarsak = (CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'tidspunkt' field.
     *
     * @return Tidspunkt for endringen.
     */
    public java.time.Instant getTidspunkt() {
        return tidspunkt;
    }


    /**
     * Sets the value of the 'tidspunkt' field.
     * Tidspunkt for endringen.
     *
     * @param value the value to set.
     */
    public void setTidspunkt(java.time.Instant value) {
        this.tidspunkt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'utfoertAv' field.
     *
     * @return The value of the 'utfoertAv' field.
     */
    public Bruker getUtfoertAv() {
        return utfoertAv;
    }


    /**
     * Sets the value of the 'utfoertAv' field.
     *
     * @param value the value to set.
     */
    public void setUtfoertAv(Bruker value) {
        this.utfoertAv = value;
    }

    /**
     * Gets the value of the 'kilde' field.
     *
     * @return Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.
     */
    public CharSequence getKilde() {
        return kilde;
    }


    /**
     * Sets the value of the 'kilde' field.
     * Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.
     *
     * @param value the value to set.
     */
    public void setKilde(CharSequence value) {
        this.kilde = value;
    }

    /**
     * Gets the value of the 'aarsak' field.
     *
     * @return Aarasek til endringen. Feks "Flyttet ut av landet" eller lignende.
     */
    public CharSequence getAarsak() {
        return aarsak;
    }


    /**
     * Sets the value of the 'aarsak' field.
     * Aarasek til endringen. Feks "Flyttet ut av landet" eller lignende.
     *
     * @param value the value to set.
     */
    public void setAarsak(CharSequence value) {
        this.aarsak = value;
    }

    /**
     * Creates a new Metadata RecordBuilder.
     *
     * @return A new Metadata RecordBuilder
     */
    public static Metadata.Builder newBuilder() {
        return new Metadata.Builder();
    }

    /**
     * Creates a new Metadata RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new Metadata RecordBuilder
     */
    public static Metadata.Builder newBuilder(Metadata.Builder other) {
        if (other == null) {
            return new Metadata.Builder();
        } else {
            return new Metadata.Builder(other);
        }
    }

    /**
     * Creates a new Metadata RecordBuilder by copying an existing Metadata instance.
     *
     * @param other The existing instance to copy.
     * @return A new Metadata RecordBuilder
     */
    public static Metadata.Builder newBuilder(Metadata other) {
        if (other == null) {
            return new Metadata.Builder();
        } else {
            return new Metadata.Builder(other);
        }
    }

    /**
     * RecordBuilder for Metadata instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Metadata>
            implements org.apache.avro.data.RecordBuilder<Metadata> {

        /**
         * Tidspunkt for endringen.
         */
        private java.time.Instant tidspunkt;
        private Bruker utfoertAv;
        private Bruker.Builder utfoertAvBuilder;
        /**
         * Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.
         */
        private CharSequence kilde;
        /**
         * Aarasek til endringen. Feks "Flyttet ut av landet" eller lignende.
         */
        private CharSequence aarsak;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(Metadata.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.tidspunkt)) {
                this.tidspunkt = data().deepCopy(fields()[0].schema(), other.tidspunkt);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.utfoertAv)) {
                this.utfoertAv = data().deepCopy(fields()[1].schema(), other.utfoertAv);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (other.hasUtfoertAvBuilder()) {
                this.utfoertAvBuilder = Bruker.newBuilder(other.getUtfoertAvBuilder());
            }
            if (isValidValue(fields()[2], other.kilde)) {
                this.kilde = data().deepCopy(fields()[2].schema(), other.kilde);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.aarsak)) {
                this.aarsak = data().deepCopy(fields()[3].schema(), other.aarsak);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
        }

        /**
         * Creates a Builder by copying an existing Metadata instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(Metadata other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.tidspunkt)) {
                this.tidspunkt = data().deepCopy(fields()[0].schema(), other.tidspunkt);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.utfoertAv)) {
                this.utfoertAv = data().deepCopy(fields()[1].schema(), other.utfoertAv);
                fieldSetFlags()[1] = true;
            }
            this.utfoertAvBuilder = null;
            if (isValidValue(fields()[2], other.kilde)) {
                this.kilde = data().deepCopy(fields()[2].schema(), other.kilde);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.aarsak)) {
                this.aarsak = data().deepCopy(fields()[3].schema(), other.aarsak);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'tidspunkt' field.
         * Tidspunkt for endringen.
         *
         * @return The value.
         */
        public java.time.Instant getTidspunkt() {
            return tidspunkt;
        }


        /**
         * Sets the value of the 'tidspunkt' field.
         * Tidspunkt for endringen.
         *
         * @param value The value of 'tidspunkt'.
         * @return This builder.
         */
        public Metadata.Builder setTidspunkt(java.time.Instant value) {
            validate(fields()[0], value);
            this.tidspunkt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'tidspunkt' field has been set.
         * Tidspunkt for endringen.
         *
         * @return True if the 'tidspunkt' field has been set, false otherwise.
         */
        public boolean hasTidspunkt() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'tidspunkt' field.
         * Tidspunkt for endringen.
         *
         * @return This builder.
         */
        public Metadata.Builder clearTidspunkt() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'utfoertAv' field.
         *
         * @return The value.
         */
        public Bruker getUtfoertAv() {
            return utfoertAv;
        }


        /**
         * Sets the value of the 'utfoertAv' field.
         *
         * @param value The value of 'utfoertAv'.
         * @return This builder.
         */
        public Metadata.Builder setUtfoertAv(Bruker value) {
            validate(fields()[1], value);
            this.utfoertAvBuilder = null;
            this.utfoertAv = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'utfoertAv' field has been set.
         *
         * @return True if the 'utfoertAv' field has been set, false otherwise.
         */
        public boolean hasUtfoertAv() {
            return fieldSetFlags()[1];
        }

        /**
         * Gets the Builder instance for the 'utfoertAv' field and creates one if it doesn't exist yet.
         *
         * @return This builder.
         */
        public Bruker.Builder getUtfoertAvBuilder() {
            if (utfoertAvBuilder == null) {
                if (hasUtfoertAv()) {
                    setUtfoertAvBuilder(Bruker.newBuilder(utfoertAv));
                } else {
                    setUtfoertAvBuilder(Bruker.newBuilder());
                }
            }
            return utfoertAvBuilder;
        }

        /**
         * Sets the Builder instance for the 'utfoertAv' field
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public Metadata.Builder setUtfoertAvBuilder(Bruker.Builder value) {
            clearUtfoertAv();
            utfoertAvBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'utfoertAv' field has an active Builder instance
         *
         * @return True if the 'utfoertAv' field has an active Builder instance
         */
        public boolean hasUtfoertAvBuilder() {
            return utfoertAvBuilder != null;
        }

        /**
         * Clears the value of the 'utfoertAv' field.
         *
         * @return This builder.
         */
        public Metadata.Builder clearUtfoertAv() {
            utfoertAv = null;
            utfoertAvBuilder = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'kilde' field.
         * Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.
         *
         * @return The value.
         */
        public CharSequence getKilde() {
            return kilde;
        }


        /**
         * Sets the value of the 'kilde' field.
         * Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.
         *
         * @param value The value of 'kilde'.
         * @return This builder.
         */
        public Metadata.Builder setKilde(CharSequence value) {
            validate(fields()[2], value);
            this.kilde = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'kilde' field has been set.
         * Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.
         *
         * @return True if the 'kilde' field has been set, false otherwise.
         */
        public boolean hasKilde() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'kilde' field.
         * Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.
         *
         * @return This builder.
         */
        public Metadata.Builder clearKilde() {
            kilde = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'aarsak' field.
         * Aarasek til endringen. Feks "Flyttet ut av landet" eller lignende.
         *
         * @return The value.
         */
        public CharSequence getAarsak() {
            return aarsak;
        }


        /**
         * Sets the value of the 'aarsak' field.
         * Aarasek til endringen. Feks "Flyttet ut av landet" eller lignende.
         *
         * @param value The value of 'aarsak'.
         * @return This builder.
         */
        public Metadata.Builder setAarsak(CharSequence value) {
            validate(fields()[3], value);
            this.aarsak = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'aarsak' field has been set.
         * Aarasek til endringen. Feks "Flyttet ut av landet" eller lignende.
         *
         * @return True if the 'aarsak' field has been set, false otherwise.
         */
        public boolean hasAarsak() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'aarsak' field.
         * Aarasek til endringen. Feks "Flyttet ut av landet" eller lignende.
         *
         * @return This builder.
         */
        public Metadata.Builder clearAarsak() {
            aarsak = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Metadata build() {
            try {
                Metadata record = new Metadata();
                record.tidspunkt = fieldSetFlags()[0] ? this.tidspunkt : (java.time.Instant) defaultValue(fields()[0]);
                if (utfoertAvBuilder != null) {
                    try {
                        record.utfoertAv = this.utfoertAvBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("utfoertAv"));
                        throw e;
                    }
                } else {
                    record.utfoertAv = fieldSetFlags()[1] ? this.utfoertAv : (Bruker) defaultValue(fields()[1]);
                }
                record.kilde = fieldSetFlags()[2] ? this.kilde : (CharSequence) defaultValue(fields()[2]);
                record.aarsak = fieldSetFlags()[3] ? this.aarsak : (CharSequence) defaultValue(fields()[3]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Metadata>
            WRITER$ = (org.apache.avro.io.DatumWriter<Metadata>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Metadata>
            READER$ = (org.apache.avro.io.DatumReader<Metadata>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}










