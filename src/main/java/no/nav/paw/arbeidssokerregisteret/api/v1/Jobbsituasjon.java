/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package no.nav.paw.arbeidssokerregisteret.api.v1;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/**
 * Inneholder et sett med beskrivelser av jobbsituasjonen. Det er mulig å ha flere beskrivelser av jobbsituasjonen,
 * feks kan personen være permittert og samtidig ha en deltidsjobb.
 */
@org.apache.avro.specific.AvroGenerated
public class Jobbsituasjon extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 4561485824339073911L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Jobbsituasjon\",\"namespace\":\"no.nav.paw.arbeidssokerregisteret.api.v1\",\"doc\":\"Inneholder et sett med beskrivelser av jobbsituasjonen. Det er mulig å ha flere beskrivelser av jobbsituasjonen,\\nfeks kan personen være permittert og samtidig ha en deltidsjobb.\",\"fields\":[{\"name\":\"beskrivelser\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BeskrivelseMedDetaljer\",\"doc\":\"Beskrivelse av et enkelt forhold som inngår i jobbsituasjonen, feks permitering eller oppsigelse\",\"fields\":[{\"name\":\"beskrivelse\",\"type\":{\"type\":\"enum\",\"name\":\"Beskrivelse\",\"doc\":\"Beskrivelse av jobbsituasjonen. Følgende beskrivelser er definert:\\nUKJENT_VERDI\\t\\t\\t\\t\\t-\\t\\tVerdien er satt, men den er ikke definert i versjonen av APIet som klienten bruker.\\nUDEFINERT\\t\\t\\t\\t\\t\\t-\\t\\tVerdien er ikke satt.\\nHAR_SAGT_OPP\\t\\t\\t\\t\\t-\\t\\tPersonen har sagt opp sin stilling.\\nHAR_BLITT_SAGT_OPP\\t\\t\\t\\t-\\t\\tPersonen har blitt sagt opp fra sin stilling.\\nER_PERMITTERT\\t\\t\\t\\t\\t-\\t\\tPersonen er permittert.\\nALDRI_HATT_JOBB\\t\\t\\t\\t\\t-\\t\\tPersonen har aldri hatt en jobb.\\nIKKE_VAERT_I_JOBB_SISTE_2_AAR\\t-\\t\\tPersonen har ikke vært i jobb de siste 2 årene.\\nAKKURAT_FULLFORT_UTDANNING\\t\\t-\\t\\tPersonen har akkurat fullført sin utdanning.\\nUSIKKER_JOBBSITUASJON\\t\\t\\t-\\t\\tPersonen er usikker på sin jobbsituasjon.\\nMIDLERTIDIG_JOBB\\t\\t\\t\\t-\\t\\tPersonen har en midlertidig jobb.\\nDELTIDSJOBB_VIL_MER\\t\\t\\t\\t-\\t\\tPersonen har en/flere deltidsjobber, men ønsker å jobbe mer.\\nNY_JOBB\\t\\t\\t\\t\\t\\t\\t-\\t\\tPersonen har fått seg ny jobb.\\nKONKURS\\t\\t\\t\\t\\t\\t\\t-\\t\\tPersonen har mistet jobben på grunn av konkurs.\\nANNET\\t\\t\\t\\t\\t\\t\\t-\\t\\tPersonen har en annen jobbsituasjon.\",\"symbols\":[\"UKJENT_VERDI\",\"UDEFINERT\",\"HAR_SAGT_OPP\",\"HAR_BLITT_SAGT_OPP\",\"ER_PERMITTERT\",\"ALDRI_HATT_JOBB\",\"IKKE_VAERT_I_JOBB_SISTE_2_AAR\",\"AKKURAT_FULLFORT_UTDANNING\",\"VIL_BYTTE_JOBB\",\"USIKKER_JOBBSITUASJON\",\"MIDLERTIDIG_JOBB\",\"DELTIDSJOBB_VIL_MER\",\"NY_JOBB\",\"KONKURS\",\"ANNET\"],\"default\":\"UKJENT_VERDI\"}},{\"name\":\"detaljer\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"* Feltene taes bare med dersom de er er tilgjengelige, i praksis må klienter støtte å motta en tom map.\\n\\t  * Andre felter enn de som er definert her kan også forekomme.\\n\\t  * Detaljer om jobbsituasjonen. Følgende nøkler er definert:\\n\\t  *          Nøkkel\\t\\t\\t\\t\\t\\t-\\t\\t\\tVerdi\\n\\t  * gjelder_fra_dato_iso8601\\t-\\t\\tdatoen jobbsituasjonen gjelder fra (eksempel 2019-01-27)\\n\\t  * gjelder_til_dato_iso8601\\t-\\t\\tdatoen jobbsituasjonen gjelder til (eksempel 2019-01-27)\\n  \\t  * stilling \\t\\t\\t\\t\\t-\\t    tekstlig beskrivelse av stillingen jobbsituasjonen gjelder (eksempel \\\"Lærer\\\")\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tForventet for:\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- HAR_SAGT_OPP\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- HAR_BLITT_SAGT_OPP\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- PERMITTERT\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- KONKURS\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tKan også brukes for andre beskriverlser som er knyttet til en stilling, feks \\\"DELTIDSJOBB_VIL_MER\\\"\\n  \\t  * stilling_styrk08 \\t\\t\\t- \\t\\tstillingens kode i STYRK08 (eksempel \\\"2359\\\"), se SSB for mer informasjon om STYRK08.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tForventet for:\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- HAR_SAGT_OPP\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- HAR_BLITT_SAGT_OPP\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- PERMITTERT\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- KONKURS\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tKan også brukes for andre beskriverlser som er knyttet til en stilling, feks \\\"DELTIDSJOBB_VIL_MER\\\"\\n  \\t  * prosent \\t\\t\\t\\t\\t- \\t\\tprosentandel jobbstituasjonen gjelder for (feks kombinert med 'ER_PERMITERT' eller 'DELTIDSJOBB_VIL_MER'), eksempel \\\"50\\\".\\n  \\t  * siste_dag_med_loenn_iso8601  - \\t\\tSiste dag det betales lønn for (feks ved oppsigelse)(eksempel 2019-01-27).\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tEnkelte kilder, inkludert migrering har brukt 'siste_dag_med_loen_iso8601' (en 'n'), enbefaler\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tderfor å normalisere til 'siste_dag_med_loenn_iso8601' (to 'n') ved lesing for å fange begge verianter.\\n  \\t  * siste_arbeidsdag_iso8601\\t-\\t\\tSiste arbeidssdag. Ikke nødvendigvis siste dag det betales lønn for, feks ved konkurs(eksempel 2019-01-27).\\n  \\t  *\"}]}}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<Jobbsituasjon> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Jobbsituasjon> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Jobbsituasjon> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Jobbsituasjon> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Jobbsituasjon> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this Jobbsituasjon to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a Jobbsituasjon from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Jobbsituasjon instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Jobbsituasjon fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.util.List<BeskrivelseMedDetaljer> beskrivelser;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Jobbsituasjon() {
    }

    /**
     * All-args constructor.
     *
     * @param beskrivelser The new value for beskrivelser
     */
    public Jobbsituasjon(java.util.List<BeskrivelseMedDetaljer> beskrivelser) {
        this.beskrivelser = beskrivelser;
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return beskrivelser;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                beskrivelser = (java.util.List<BeskrivelseMedDetaljer>) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'beskrivelser' field.
     *
     * @return The value of the 'beskrivelser' field.
     */
    public java.util.List<BeskrivelseMedDetaljer> getBeskrivelser() {
        return beskrivelser;
    }


    /**
     * Sets the value of the 'beskrivelser' field.
     *
     * @param value the value to set.
     */
    public void setBeskrivelser(java.util.List<BeskrivelseMedDetaljer> value) {
        this.beskrivelser = value;
    }

    /**
     * Creates a new Jobbsituasjon RecordBuilder.
     *
     * @return A new Jobbsituasjon RecordBuilder
     */
    public static Jobbsituasjon.Builder newBuilder() {
        return new Jobbsituasjon.Builder();
    }

    /**
     * Creates a new Jobbsituasjon RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new Jobbsituasjon RecordBuilder
     */
    public static Jobbsituasjon.Builder newBuilder(Jobbsituasjon.Builder other) {
        if (other == null) {
            return new Jobbsituasjon.Builder();
        } else {
            return new Jobbsituasjon.Builder(other);
        }
    }

    /**
     * Creates a new Jobbsituasjon RecordBuilder by copying an existing Jobbsituasjon instance.
     *
     * @param other The existing instance to copy.
     * @return A new Jobbsituasjon RecordBuilder
     */
    public static Jobbsituasjon.Builder newBuilder(Jobbsituasjon other) {
        if (other == null) {
            return new Jobbsituasjon.Builder();
        } else {
            return new Jobbsituasjon.Builder(other);
        }
    }

    /**
     * RecordBuilder for Jobbsituasjon instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Jobbsituasjon>
            implements org.apache.avro.data.RecordBuilder<Jobbsituasjon> {

        private java.util.List<BeskrivelseMedDetaljer> beskrivelser;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(Jobbsituasjon.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.beskrivelser)) {
                this.beskrivelser = data().deepCopy(fields()[0].schema(), other.beskrivelser);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
        }

        /**
         * Creates a Builder by copying an existing Jobbsituasjon instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(Jobbsituasjon other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.beskrivelser)) {
                this.beskrivelser = data().deepCopy(fields()[0].schema(), other.beskrivelser);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Gets the value of the 'beskrivelser' field.
         *
         * @return The value.
         */
        public java.util.List<BeskrivelseMedDetaljer> getBeskrivelser() {
            return beskrivelser;
        }


        /**
         * Sets the value of the 'beskrivelser' field.
         *
         * @param value The value of 'beskrivelser'.
         * @return This builder.
         */
        public Jobbsituasjon.Builder setBeskrivelser(java.util.List<BeskrivelseMedDetaljer> value) {
            validate(fields()[0], value);
            this.beskrivelser = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'beskrivelser' field has been set.
         *
         * @return True if the 'beskrivelser' field has been set, false otherwise.
         */
        public boolean hasBeskrivelser() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'beskrivelser' field.
         *
         * @return This builder.
         */
        public Jobbsituasjon.Builder clearBeskrivelser() {
            beskrivelser = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Jobbsituasjon build() {
            try {
                Jobbsituasjon record = new Jobbsituasjon();
                record.beskrivelser = fieldSetFlags()[0] ? this.beskrivelser : (java.util.List<BeskrivelseMedDetaljer>) defaultValue(fields()[0]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Jobbsituasjon>
            WRITER$ = (org.apache.avro.io.DatumWriter<Jobbsituasjon>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Jobbsituasjon>
            READER$ = (org.apache.avro.io.DatumReader<Jobbsituasjon>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        long size0 = this.beskrivelser.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (BeskrivelseMedDetaljer e0 : this.beskrivelser) {
            actualSize0++;
            out.startItem();
            e0.customEncode(out);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            long size0 = in.readArrayStart();
            java.util.List<BeskrivelseMedDetaljer> a0 = this.beskrivelser;
            if (a0 == null) {
                a0 = new SpecificData.Array<BeskrivelseMedDetaljer>((int) size0, SCHEMA$.getField("beskrivelser").schema());
                this.beskrivelser = a0;
            } else a0.clear();
            SpecificData.Array<BeskrivelseMedDetaljer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<BeskrivelseMedDetaljer>) a0 : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                    BeskrivelseMedDetaljer e0 = (ga0 != null ? ga0.peek() : null);
                    if (e0 == null) {
                        e0 = new BeskrivelseMedDetaljer();
                    }
                    e0.customDecode(in);
                    a0.add(e0);
                }
            }

        } else {
            for (int i = 0; i < 1; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        long size0 = in.readArrayStart();
                        java.util.List<BeskrivelseMedDetaljer> a0 = this.beskrivelser;
                        if (a0 == null) {
                            a0 = new SpecificData.Array<BeskrivelseMedDetaljer>((int) size0, SCHEMA$.getField("beskrivelser").schema());
                            this.beskrivelser = a0;
                        } else a0.clear();
                        SpecificData.Array<BeskrivelseMedDetaljer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<BeskrivelseMedDetaljer>) a0 : null);
                        for (; 0 < size0; size0 = in.arrayNext()) {
                            for (; size0 != 0; size0--) {
                                BeskrivelseMedDetaljer e0 = (ga0 != null ? ga0.peek() : null);
                                if (e0 == null) {
                                    e0 = new BeskrivelseMedDetaljer();
                                }
                                e0.customDecode(in);
                                a0.add(e0);
                            }
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










