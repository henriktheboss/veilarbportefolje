/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package no.nav.paw.arbeidssokerregisteret.api.v4;

import no.nav.paw.arbeidssokerregisteret.api.v1.Helse;
import no.nav.paw.arbeidssokerregisteret.api.v1.Jobbsituasjon;
import no.nav.paw.arbeidssokerregisteret.api.v1.Metadata;
import no.nav.paw.arbeidssokerregisteret.api.v2.Annet;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/**
 * Inneholder diverse opplysninger om arbeidssøker som er relevant for å kunne
 * hjelpe arbeidssøkeren med å finne arbeid på best mulig måte.
 * I enkelte tilfeller kan en 'OpplysningerOmArbeidssoeker' oppdateres til å være
 * knyttet til en annen periodeId, altså ny melding men med samme 'id' hvor feltet periodeId er endret.
 * Utover dette vil ikke opplysningene endre seg, det vil heller komme
 * en ny melding med ny 'id'.
 * Utdanning, helse og annet er valgfri informasjon, mens jobbsituasjon er obligatorisk.
 * Dersom det ikke er innhentet informasjon om utdanning, helse eller annet, skal disse feltene være null.
 */
@org.apache.avro.specific.AvroGenerated
public class OpplysningerOmArbeidssoeker extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 7831616694691622992L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OpplysningerOmArbeidssoeker\",\"namespace\":\"no.nav.paw.arbeidssokerregisteret.api.v4\",\"doc\":\"Inneholder diverse opplysninger om arbeidssøker som er relevant for å kunne\\nhjelpe arbeidssøkeren med å finne arbeid på best mulig måte.\\nI enkelte tilfeller kan en 'OpplysningerOmArbeidssoeker' oppdateres til å være\\nknyttet til en annen periodeId, altså ny melding men med samme 'id' hvor feltet periodeId er endret.\\nUtover dette vil ikke opplysningene endre seg, det vil heller komme\\nen ny melding med ny 'id'.\\nUtdanning, helse og annet er valgfri informasjon, mens jobbsituasjon er obligatorisk.\\nDersom det ikke er innhentet informasjon om utdanning, helse eller annet, skal disse feltene være null.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"},\"doc\":\"Unik id for opplysninger om arbeidssøker\"},{\"name\":\"periodeId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"},\"doc\":\"Id til periode som opplysninger om arbeidssøker tilhører\"},{\"name\":\"sendtInnAv\",\"type\":{\"type\":\"record\",\"name\":\"Metadata\",\"namespace\":\"no.nav.paw.arbeidssokerregisteret.api.v1\",\"doc\":\"Inneholder metadata om en endring i arbeidssøkerregisteret.\",\"fields\":[{\"name\":\"tidspunkt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Tidspunkt for endringen.\"},{\"name\":\"utfoertAv\",\"type\":{\"type\":\"record\",\"name\":\"Bruker\",\"doc\":\"En bruker er en person eller et system. Personer kan være sluttbrukere eller veiledere.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"BrukerType\",\"symbols\":[\"UKJENT_VERDI\",\"UDEFINERT\",\"VEILEDER\",\"SYSTEM\",\"SLUTTBRUKER\"],\"default\":\"UKJENT_VERDI\"},\"doc\":\"Angir hvilken type bruker det er snakk om\"},{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Brukerens identifikator.\\nFor sluttbruker er dette typisk fødselsnummer eller D-nummer.\\nFor system vil det rett og slett være navnet på et system, eventuelt med versjonsnummer i tillegg (APP_NAVN:VERSJON).\\nFor veileder vil det være NAV identen til veilederen.\"}]}},{\"name\":\"kilde\",\"type\":\"string\",\"doc\":\"Navn på systemet som utførte endringen eller ble benyttet til å utføre endringen.\"},{\"name\":\"aarsak\",\"type\":\"string\",\"doc\":\"Aarasek til endringen. Feks \\\"Flyttet ut av landet\\\" eller lignende.\"}]},\"doc\":\"Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)\"},{\"name\":\"utdanning\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Utdanning\",\"fields\":[{\"name\":\"nus\",\"type\":\"string\",\"doc\":\"NUS kode for utdanning, oversikt over NUS koder er tilgjengelig fra SSB.\"},{\"name\":\"bestaatt\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"JaNeiVetIkke\",\"namespace\":\"no.nav.paw.arbeidssokerregisteret.api.v1\",\"doc\":\"Enkel enum som brukes til typisk 'ja', 'nei' eller 'vet ikke' svar.\",\"symbols\":[\"JA\",\"NEI\",\"VET_IKKE\"]}],\"doc\":\"Bare inkludert dersom informasjonen er innhetet, feks for\\nnus kode 0,1,2 og 9 gir det ikke mening å hente inn info for\\ndette feltet.\\n\",\"default\":null},{\"name\":\"godkjent\",\"type\":[\"null\",\"no.nav.paw.arbeidssokerregisteret.api.v1.JaNeiVetIkke\"],\"doc\":\"Bare inkludert dersom informasjonen er innhetet, feks for\\nnus kode 0,1,2 og 9 gir det ikke mening å hente inn info for\\ndette feltet.\\n\",\"default\":null}]}],\"doc\":\"Informasjon om arbeidssøkerens utdanning\\nDersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.\",\"default\":null},{\"name\":\"helse\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Helse\",\"namespace\":\"no.nav.paw.arbeidssokerregisteret.api.v1\",\"doc\":\"Helse\",\"fields\":[{\"name\":\"helsetilstandHindrerArbeid\",\"type\":\"JaNeiVetIkke\"}]}],\"doc\":\"Informasjon om arbeidssøkerens helse\\nDersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.\",\"default\":null},{\"name\":\"jobbsituasjon\",\"type\":{\"type\":\"record\",\"name\":\"Jobbsituasjon\",\"namespace\":\"no.nav.paw.arbeidssokerregisteret.api.v1\",\"doc\":\"Inneholder et sett med beskrivelser av jobbsituasjonen. Det er mulig å ha flere beskrivelser av jobbsituasjonen,\\nfeks kan personen være permittert og samtidig ha en deltidsjobb.\",\"fields\":[{\"name\":\"beskrivelser\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BeskrivelseMedDetaljer\",\"doc\":\"Beskrivelse av et enkelt forhold som inngår i jobbsituasjonen, feks permitering eller oppsigelse\",\"fields\":[{\"name\":\"beskrivelse\",\"type\":{\"type\":\"enum\",\"name\":\"Beskrivelse\",\"doc\":\"Beskrivelse av jobbsituasjonen. Følgende beskrivelser er definert:\\nUKJENT_VERDI\\t\\t\\t\\t\\t-\\t\\tVerdien er satt, men den er ikke definert i versjonen av APIet som klienten bruker.\\nUDEFINERT\\t\\t\\t\\t\\t\\t-\\t\\tVerdien er ikke satt.\\nHAR_SAGT_OPP\\t\\t\\t\\t\\t-\\t\\tPersonen har sagt opp sin stilling.\\nHAR_BLITT_SAGT_OPP\\t\\t\\t\\t-\\t\\tPersonen har blitt sagt opp fra sin stilling.\\nER_PERMITTERT\\t\\t\\t\\t\\t-\\t\\tPersonen er permittert.\\nALDRI_HATT_JOBB\\t\\t\\t\\t\\t-\\t\\tPersonen har aldri hatt en jobb.\\nIKKE_VAERT_I_JOBB_SISTE_2_AAR\\t-\\t\\tPersonen har ikke vært i jobb de siste 2 årene.\\nAKKURAT_FULLFORT_UTDANNING\\t\\t-\\t\\tPersonen har akkurat fullført sin utdanning.\\nUSIKKER_JOBBSITUASJON\\t\\t\\t-\\t\\tPersonen er usikker på sin jobbsituasjon.\\nMIDLERTIDIG_JOBB\\t\\t\\t\\t-\\t\\tPersonen har en midlertidig jobb.\\nDELTIDSJOBB_VIL_MER\\t\\t\\t\\t-\\t\\tPersonen har en/flere deltidsjobber, men ønsker å jobbe mer.\\nNY_JOBB\\t\\t\\t\\t\\t\\t\\t-\\t\\tPersonen har fått seg ny jobb.\\nKONKURS\\t\\t\\t\\t\\t\\t\\t-\\t\\tPersonen har mistet jobben på grunn av konkurs.\\nANNET\\t\\t\\t\\t\\t\\t\\t-\\t\\tPersonen har en annen jobbsituasjon.\",\"symbols\":[\"UKJENT_VERDI\",\"UDEFINERT\",\"HAR_SAGT_OPP\",\"HAR_BLITT_SAGT_OPP\",\"ER_PERMITTERT\",\"ALDRI_HATT_JOBB\",\"IKKE_VAERT_I_JOBB_SISTE_2_AAR\",\"AKKURAT_FULLFORT_UTDANNING\",\"VIL_BYTTE_JOBB\",\"USIKKER_JOBBSITUASJON\",\"MIDLERTIDIG_JOBB\",\"DELTIDSJOBB_VIL_MER\",\"NY_JOBB\",\"KONKURS\",\"ANNET\"],\"default\":\"UKJENT_VERDI\"}},{\"name\":\"detaljer\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"* Feltene taes bare med dersom de er er tilgjengelige, i praksis må klienter støtte å motta en tom map.\\n\\t  * Andre felter enn de som er definert her kan også forekomme.\\n\\t  * Detaljer om jobbsituasjonen. Følgende nøkler er definert:\\n\\t  *          Nøkkel\\t\\t\\t\\t\\t\\t-\\t\\t\\tVerdi\\n\\t  * gjelder_fra_dato_iso8601\\t-\\t\\tdatoen jobbsituasjonen gjelder fra (eksempel 2019-01-27)\\n\\t  * gjelder_til_dato_iso8601\\t-\\t\\tdatoen jobbsituasjonen gjelder til (eksempel 2019-01-27)\\n  \\t  * stilling \\t\\t\\t\\t\\t-\\t    tekstlig beskrivelse av stillingen jobbsituasjonen gjelder (eksempel \\\"Lærer\\\")\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tForventet for:\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- HAR_SAGT_OPP\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- HAR_BLITT_SAGT_OPP\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- PERMITTERT\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- KONKURS\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tKan også brukes for andre beskriverlser som er knyttet til en stilling, feks \\\"DELTIDSJOBB_VIL_MER\\\"\\n  \\t  * stilling_styrk08 \\t\\t\\t- \\t\\tstillingens kode i STYRK08 (eksempel \\\"2359\\\"), se SSB for mer informasjon om STYRK08.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tForventet for:\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- HAR_SAGT_OPP\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- HAR_BLITT_SAGT_OPP\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- PERMITTERT\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t- KONKURS\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tKan også brukes for andre beskriverlser som er knyttet til en stilling, feks \\\"DELTIDSJOBB_VIL_MER\\\"\\n  \\t  * prosent \\t\\t\\t\\t\\t- \\t\\tprosentandel jobbstituasjonen gjelder for (feks kombinert med 'ER_PERMITERT' eller 'DELTIDSJOBB_VIL_MER'), eksempel \\\"50\\\".\\n  \\t  * siste_dag_med_loenn_iso8601  - \\t\\tSiste dag det betales lønn for (feks ved oppsigelse)(eksempel 2019-01-27).\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tEnkelte kilder, inkludert migrering har brukt 'siste_dag_med_loen_iso8601' (en 'n'), enbefaler\\n  \\t  \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tderfor å normalisere til 'siste_dag_med_loenn_iso8601' (to 'n') ved lesing for å fange begge verianter.\\n  \\t  * siste_arbeidsdag_iso8601\\t-\\t\\tSiste arbeidssdag. Ikke nødvendigvis siste dag det betales lønn for, feks ved konkurs(eksempel 2019-01-27).\\n  \\t  *\"}]}}}]},\"doc\":\"Informasjon om arbeidssøkerens jobbsituasjon\"},{\"name\":\"annet\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Annet\",\"namespace\":\"no.nav.paw.arbeidssokerregisteret.api.v2\",\"fields\":[{\"name\":\"andreForholdHindrerArbeid\",\"type\":[\"null\",\"no.nav.paw.arbeidssokerregisteret.api.v1.JaNeiVetIkke\"],\"default\":null}]}],\"doc\":\"Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe\\nDersom det ikke var relevan", "t å innhente annen informasjon er dette feltet 'null'.\",\"default\":null}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<OpplysningerOmArbeidssoeker> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<OpplysningerOmArbeidssoeker> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<OpplysningerOmArbeidssoeker> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<OpplysningerOmArbeidssoeker> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<OpplysningerOmArbeidssoeker> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this OpplysningerOmArbeidssoeker to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a OpplysningerOmArbeidssoeker from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a OpplysningerOmArbeidssoeker instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static OpplysningerOmArbeidssoeker fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Unik id for opplysninger om arbeidssøker
     */
    private java.util.UUID id;
    /**
     * Id til periode som opplysninger om arbeidssøker tilhører
     */
    private java.util.UUID periodeId;
    /**
     * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
     */
    private Metadata sendtInnAv;
    /**
     * Informasjon om arbeidssøkerens utdanning
     * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
     */
    private Utdanning utdanning;
    /**
     * Informasjon om arbeidssøkerens helse
     * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
     */
    private Helse helse;
    /**
     * Informasjon om arbeidssøkerens jobbsituasjon
     */
    private Jobbsituasjon jobbsituasjon;
    /**
     * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
     * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
     */
    private Annet annet;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public OpplysningerOmArbeidssoeker() {
    }

    /**
     * All-args constructor.
     *
     * @param id            Unik id for opplysninger om arbeidssøker
     * @param periodeId     Id til periode som opplysninger om arbeidssøker tilhører
     * @param sendtInnAv    Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
     * @param utdanning     Informasjon om arbeidssøkerens utdanning
     *                      Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
     * @param helse         Informasjon om arbeidssøkerens helse
     *                      Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
     * @param jobbsituasjon Informasjon om arbeidssøkerens jobbsituasjon
     * @param annet         Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
     *                      Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
     */
    public OpplysningerOmArbeidssoeker(java.util.UUID id, java.util.UUID periodeId, Metadata sendtInnAv, Utdanning utdanning, Helse helse, Jobbsituasjon jobbsituasjon, Annet annet) {
        this.id = id;
        this.periodeId = periodeId;
        this.sendtInnAv = sendtInnAv;
        this.utdanning = utdanning;
        this.helse = helse;
        this.jobbsituasjon = jobbsituasjon;
        this.annet = annet;
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return periodeId;
            case 2:
                return sendtInnAv;
            case 3:
                return utdanning;
            case 4:
                return helse;
            case 5:
                return jobbsituasjon;
            case 6:
                return annet;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions =
            new org.apache.avro.Conversion<?>[]{
                    new org.apache.avro.Conversions.UUIDConversion(),
                    new org.apache.avro.Conversions.UUIDConversion(),
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
            };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                id = (java.util.UUID) value$;
                break;
            case 1:
                periodeId = (java.util.UUID) value$;
                break;
            case 2:
                sendtInnAv = (Metadata) value$;
                break;
            case 3:
                utdanning = (Utdanning) value$;
                break;
            case 4:
                helse = (Helse) value$;
                break;
            case 5:
                jobbsituasjon = (Jobbsituasjon) value$;
                break;
            case 6:
                annet = (Annet) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'id' field.
     *
     * @return Unik id for opplysninger om arbeidssøker
     */
    public java.util.UUID getId() {
        return id;
    }


    /**
     * Sets the value of the 'id' field.
     * Unik id for opplysninger om arbeidssøker
     *
     * @param value the value to set.
     */
    public void setId(java.util.UUID value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'periodeId' field.
     *
     * @return Id til periode som opplysninger om arbeidssøker tilhører
     */
    public java.util.UUID getPeriodeId() {
        return periodeId;
    }


    /**
     * Sets the value of the 'periodeId' field.
     * Id til periode som opplysninger om arbeidssøker tilhører
     *
     * @param value the value to set.
     */
    public void setPeriodeId(java.util.UUID value) {
        this.periodeId = value;
    }

    /**
     * Gets the value of the 'sendtInnAv' field.
     *
     * @return Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
     */
    public Metadata getSendtInnAv() {
        return sendtInnAv;
    }


    /**
     * Sets the value of the 'sendtInnAv' field.
     * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
     *
     * @param value the value to set.
     */
    public void setSendtInnAv(Metadata value) {
        this.sendtInnAv = value;
    }

    /**
     * Gets the value of the 'utdanning' field.
     *
     * @return Informasjon om arbeidssøkerens utdanning
     * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
     */
    public Utdanning getUtdanning() {
        return utdanning;
    }


    /**
     * Sets the value of the 'utdanning' field.
     * Informasjon om arbeidssøkerens utdanning
     * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
     *
     * @param value the value to set.
     */
    public void setUtdanning(Utdanning value) {
        this.utdanning = value;
    }

    /**
     * Gets the value of the 'helse' field.
     *
     * @return Informasjon om arbeidssøkerens helse
     * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
     */
    public Helse getHelse() {
        return helse;
    }


    /**
     * Sets the value of the 'helse' field.
     * Informasjon om arbeidssøkerens helse
     * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
     *
     * @param value the value to set.
     */
    public void setHelse(Helse value) {
        this.helse = value;
    }

    /**
     * Gets the value of the 'jobbsituasjon' field.
     *
     * @return Informasjon om arbeidssøkerens jobbsituasjon
     */
    public Jobbsituasjon getJobbsituasjon() {
        return jobbsituasjon;
    }


    /**
     * Sets the value of the 'jobbsituasjon' field.
     * Informasjon om arbeidssøkerens jobbsituasjon
     *
     * @param value the value to set.
     */
    public void setJobbsituasjon(Jobbsituasjon value) {
        this.jobbsituasjon = value;
    }

    /**
     * Gets the value of the 'annet' field.
     *
     * @return Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
     * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
     */
    public Annet getAnnet() {
        return annet;
    }


    /**
     * Sets the value of the 'annet' field.
     * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
     * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
     *
     * @param value the value to set.
     */
    public void setAnnet(Annet value) {
        this.annet = value;
    }

    /**
     * Creates a new OpplysningerOmArbeidssoeker RecordBuilder.
     *
     * @return A new OpplysningerOmArbeidssoeker RecordBuilder
     */
    public static OpplysningerOmArbeidssoeker.Builder newBuilder() {
        return new OpplysningerOmArbeidssoeker.Builder();
    }

    /**
     * Creates a new OpplysningerOmArbeidssoeker RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new OpplysningerOmArbeidssoeker RecordBuilder
     */
    public static OpplysningerOmArbeidssoeker.Builder newBuilder(OpplysningerOmArbeidssoeker.Builder other) {
        if (other == null) {
            return new OpplysningerOmArbeidssoeker.Builder();
        } else {
            return new OpplysningerOmArbeidssoeker.Builder(other);
        }
    }

    /**
     * Creates a new OpplysningerOmArbeidssoeker RecordBuilder by copying an existing OpplysningerOmArbeidssoeker instance.
     *
     * @param other The existing instance to copy.
     * @return A new OpplysningerOmArbeidssoeker RecordBuilder
     */
    public static OpplysningerOmArbeidssoeker.Builder newBuilder(OpplysningerOmArbeidssoeker other) {
        if (other == null) {
            return new OpplysningerOmArbeidssoeker.Builder();
        } else {
            return new OpplysningerOmArbeidssoeker.Builder(other);
        }
    }

    /**
     * RecordBuilder for OpplysningerOmArbeidssoeker instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OpplysningerOmArbeidssoeker>
            implements org.apache.avro.data.RecordBuilder<OpplysningerOmArbeidssoeker> {

        /**
         * Unik id for opplysninger om arbeidssøker
         */
        private java.util.UUID id;
        /**
         * Id til periode som opplysninger om arbeidssøker tilhører
         */
        private java.util.UUID periodeId;
        /**
         * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
         */
        private Metadata sendtInnAv;
        private Metadata.Builder sendtInnAvBuilder;
        /**
         * Informasjon om arbeidssøkerens utdanning
         * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
         */
        private Utdanning utdanning;
        private Utdanning.Builder utdanningBuilder;
        /**
         * Informasjon om arbeidssøkerens helse
         * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
         */
        private Helse helse;
        private Helse.Builder helseBuilder;
        /**
         * Informasjon om arbeidssøkerens jobbsituasjon
         */
        private Jobbsituasjon jobbsituasjon;
        private Jobbsituasjon.Builder jobbsituasjonBuilder;
        /**
         * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
         * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
         */
        private Annet annet;
        private Annet.Builder annetBuilder;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(OpplysningerOmArbeidssoeker.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.periodeId)) {
                this.periodeId = data().deepCopy(fields()[1].schema(), other.periodeId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.sendtInnAv)) {
                this.sendtInnAv = data().deepCopy(fields()[2].schema(), other.sendtInnAv);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (other.hasSendtInnAvBuilder()) {
                this.sendtInnAvBuilder = Metadata.newBuilder(other.getSendtInnAvBuilder());
            }
            if (isValidValue(fields()[3], other.utdanning)) {
                this.utdanning = data().deepCopy(fields()[3].schema(), other.utdanning);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (other.hasUtdanningBuilder()) {
                this.utdanningBuilder = Utdanning.newBuilder(other.getUtdanningBuilder());
            }
            if (isValidValue(fields()[4], other.helse)) {
                this.helse = data().deepCopy(fields()[4].schema(), other.helse);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (other.hasHelseBuilder()) {
                this.helseBuilder = Helse.newBuilder(other.getHelseBuilder());
            }
            if (isValidValue(fields()[5], other.jobbsituasjon)) {
                this.jobbsituasjon = data().deepCopy(fields()[5].schema(), other.jobbsituasjon);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (other.hasJobbsituasjonBuilder()) {
                this.jobbsituasjonBuilder = Jobbsituasjon.newBuilder(other.getJobbsituasjonBuilder());
            }
            if (isValidValue(fields()[6], other.annet)) {
                this.annet = data().deepCopy(fields()[6].schema(), other.annet);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (other.hasAnnetBuilder()) {
                this.annetBuilder = Annet.newBuilder(other.getAnnetBuilder());
            }
        }

        /**
         * Creates a Builder by copying an existing OpplysningerOmArbeidssoeker instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(OpplysningerOmArbeidssoeker other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.periodeId)) {
                this.periodeId = data().deepCopy(fields()[1].schema(), other.periodeId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.sendtInnAv)) {
                this.sendtInnAv = data().deepCopy(fields()[2].schema(), other.sendtInnAv);
                fieldSetFlags()[2] = true;
            }
            this.sendtInnAvBuilder = null;
            if (isValidValue(fields()[3], other.utdanning)) {
                this.utdanning = data().deepCopy(fields()[3].schema(), other.utdanning);
                fieldSetFlags()[3] = true;
            }
            this.utdanningBuilder = null;
            if (isValidValue(fields()[4], other.helse)) {
                this.helse = data().deepCopy(fields()[4].schema(), other.helse);
                fieldSetFlags()[4] = true;
            }
            this.helseBuilder = null;
            if (isValidValue(fields()[5], other.jobbsituasjon)) {
                this.jobbsituasjon = data().deepCopy(fields()[5].schema(), other.jobbsituasjon);
                fieldSetFlags()[5] = true;
            }
            this.jobbsituasjonBuilder = null;
            if (isValidValue(fields()[6], other.annet)) {
                this.annet = data().deepCopy(fields()[6].schema(), other.annet);
                fieldSetFlags()[6] = true;
            }
            this.annetBuilder = null;
        }

        /**
         * Gets the value of the 'id' field.
         * Unik id for opplysninger om arbeidssøker
         *
         * @return The value.
         */
        public java.util.UUID getId() {
            return id;
        }


        /**
         * Sets the value of the 'id' field.
         * Unik id for opplysninger om arbeidssøker
         *
         * @param value The value of 'id'.
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder setId(java.util.UUID value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * Unik id for opplysninger om arbeidssøker
         *
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * Unik id for opplysninger om arbeidssøker
         *
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder clearId() {
            id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'periodeId' field.
         * Id til periode som opplysninger om arbeidssøker tilhører
         *
         * @return The value.
         */
        public java.util.UUID getPeriodeId() {
            return periodeId;
        }


        /**
         * Sets the value of the 'periodeId' field.
         * Id til periode som opplysninger om arbeidssøker tilhører
         *
         * @param value The value of 'periodeId'.
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder setPeriodeId(java.util.UUID value) {
            validate(fields()[1], value);
            this.periodeId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'periodeId' field has been set.
         * Id til periode som opplysninger om arbeidssøker tilhører
         *
         * @return True if the 'periodeId' field has been set, false otherwise.
         */
        public boolean hasPeriodeId() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'periodeId' field.
         * Id til periode som opplysninger om arbeidssøker tilhører
         *
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder clearPeriodeId() {
            periodeId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'sendtInnAv' field.
         * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
         *
         * @return The value.
         */
        public Metadata getSendtInnAv() {
            return sendtInnAv;
        }


        /**
         * Sets the value of the 'sendtInnAv' field.
         * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
         *
         * @param value The value of 'sendtInnAv'.
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder setSendtInnAv(Metadata value) {
            validate(fields()[2], value);
            this.sendtInnAvBuilder = null;
            this.sendtInnAv = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'sendtInnAv' field has been set.
         * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
         *
         * @return True if the 'sendtInnAv' field has been set, false otherwise.
         */
        public boolean hasSendtInnAv() {
            return fieldSetFlags()[2];
        }

        /**
         * Gets the Builder instance for the 'sendtInnAv' field and creates one if it doesn't exist yet.
         * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
         *
         * @return This builder.
         */
        public Metadata.Builder getSendtInnAvBuilder() {
            if (sendtInnAvBuilder == null) {
                if (hasSendtInnAv()) {
                    setSendtInnAvBuilder(Metadata.newBuilder(sendtInnAv));
                } else {
                    setSendtInnAvBuilder(Metadata.newBuilder());
                }
            }
            return sendtInnAvBuilder;
        }

        /**
         * Sets the Builder instance for the 'sendtInnAv' field
         * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public OpplysningerOmArbeidssoeker.Builder setSendtInnAvBuilder(Metadata.Builder value) {
            clearSendtInnAv();
            sendtInnAvBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'sendtInnAv' field has an active Builder instance
         * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
         *
         * @return True if the 'sendtInnAv' field has an active Builder instance
         */
        public boolean hasSendtInnAvBuilder() {
            return sendtInnAvBuilder != null;
        }

        /**
         * Clears the value of the 'sendtInnAv' field.
         * Informasjon om hvem som har sendt inn opplysningene om arbeidssøker (og når)
         *
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder clearSendtInnAv() {
            sendtInnAv = null;
            sendtInnAvBuilder = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'utdanning' field.
         * Informasjon om arbeidssøkerens utdanning
         * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
         *
         * @return The value.
         */
        public Utdanning getUtdanning() {
            return utdanning;
        }


        /**
         * Sets the value of the 'utdanning' field.
         * Informasjon om arbeidssøkerens utdanning
         * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
         *
         * @param value The value of 'utdanning'.
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder setUtdanning(Utdanning value) {
            validate(fields()[3], value);
            this.utdanningBuilder = null;
            this.utdanning = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'utdanning' field has been set.
         * Informasjon om arbeidssøkerens utdanning
         * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
         *
         * @return True if the 'utdanning' field has been set, false otherwise.
         */
        public boolean hasUtdanning() {
            return fieldSetFlags()[3];
        }

        /**
         * Gets the Builder instance for the 'utdanning' field and creates one if it doesn't exist yet.
         * Informasjon om arbeidssøkerens utdanning
         * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
         *
         * @return This builder.
         */
        public Utdanning.Builder getUtdanningBuilder() {
            if (utdanningBuilder == null) {
                if (hasUtdanning()) {
                    setUtdanningBuilder(Utdanning.newBuilder(utdanning));
                } else {
                    setUtdanningBuilder(Utdanning.newBuilder());
                }
            }
            return utdanningBuilder;
        }

        /**
         * Sets the Builder instance for the 'utdanning' field
         * Informasjon om arbeidssøkerens utdanning
         * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public OpplysningerOmArbeidssoeker.Builder setUtdanningBuilder(Utdanning.Builder value) {
            clearUtdanning();
            utdanningBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'utdanning' field has an active Builder instance
         * Informasjon om arbeidssøkerens utdanning
         * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
         *
         * @return True if the 'utdanning' field has an active Builder instance
         */
        public boolean hasUtdanningBuilder() {
            return utdanningBuilder != null;
        }

        /**
         * Clears the value of the 'utdanning' field.
         * Informasjon om arbeidssøkerens utdanning
         * Dersom det ikke var relevant å innhente informasjon om utdanning er dette feltet 'null'.
         *
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder clearUtdanning() {
            utdanning = null;
            utdanningBuilder = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'helse' field.
         * Informasjon om arbeidssøkerens helse
         * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
         *
         * @return The value.
         */
        public Helse getHelse() {
            return helse;
        }


        /**
         * Sets the value of the 'helse' field.
         * Informasjon om arbeidssøkerens helse
         * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
         *
         * @param value The value of 'helse'.
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder setHelse(Helse value) {
            validate(fields()[4], value);
            this.helseBuilder = null;
            this.helse = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'helse' field has been set.
         * Informasjon om arbeidssøkerens helse
         * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
         *
         * @return True if the 'helse' field has been set, false otherwise.
         */
        public boolean hasHelse() {
            return fieldSetFlags()[4];
        }

        /**
         * Gets the Builder instance for the 'helse' field and creates one if it doesn't exist yet.
         * Informasjon om arbeidssøkerens helse
         * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
         *
         * @return This builder.
         */
        public Helse.Builder getHelseBuilder() {
            if (helseBuilder == null) {
                if (hasHelse()) {
                    setHelseBuilder(Helse.newBuilder(helse));
                } else {
                    setHelseBuilder(Helse.newBuilder());
                }
            }
            return helseBuilder;
        }

        /**
         * Sets the Builder instance for the 'helse' field
         * Informasjon om arbeidssøkerens helse
         * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public OpplysningerOmArbeidssoeker.Builder setHelseBuilder(Helse.Builder value) {
            clearHelse();
            helseBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'helse' field has an active Builder instance
         * Informasjon om arbeidssøkerens helse
         * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
         *
         * @return True if the 'helse' field has an active Builder instance
         */
        public boolean hasHelseBuilder() {
            return helseBuilder != null;
        }

        /**
         * Clears the value of the 'helse' field.
         * Informasjon om arbeidssøkerens helse
         * Dersom det ikke var relevant å innhente informasjon om helse er dette feltet 'null'.
         *
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder clearHelse() {
            helse = null;
            helseBuilder = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'jobbsituasjon' field.
         * Informasjon om arbeidssøkerens jobbsituasjon
         *
         * @return The value.
         */
        public Jobbsituasjon getJobbsituasjon() {
            return jobbsituasjon;
        }


        /**
         * Sets the value of the 'jobbsituasjon' field.
         * Informasjon om arbeidssøkerens jobbsituasjon
         *
         * @param value The value of 'jobbsituasjon'.
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder setJobbsituasjon(Jobbsituasjon value) {
            validate(fields()[5], value);
            this.jobbsituasjonBuilder = null;
            this.jobbsituasjon = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'jobbsituasjon' field has been set.
         * Informasjon om arbeidssøkerens jobbsituasjon
         *
         * @return True if the 'jobbsituasjon' field has been set, false otherwise.
         */
        public boolean hasJobbsituasjon() {
            return fieldSetFlags()[5];
        }

        /**
         * Gets the Builder instance for the 'jobbsituasjon' field and creates one if it doesn't exist yet.
         * Informasjon om arbeidssøkerens jobbsituasjon
         *
         * @return This builder.
         */
        public Jobbsituasjon.Builder getJobbsituasjonBuilder() {
            if (jobbsituasjonBuilder == null) {
                if (hasJobbsituasjon()) {
                    setJobbsituasjonBuilder(Jobbsituasjon.newBuilder(jobbsituasjon));
                } else {
                    setJobbsituasjonBuilder(Jobbsituasjon.newBuilder());
                }
            }
            return jobbsituasjonBuilder;
        }

        /**
         * Sets the Builder instance for the 'jobbsituasjon' field
         * Informasjon om arbeidssøkerens jobbsituasjon
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public OpplysningerOmArbeidssoeker.Builder setJobbsituasjonBuilder(Jobbsituasjon.Builder value) {
            clearJobbsituasjon();
            jobbsituasjonBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'jobbsituasjon' field has an active Builder instance
         * Informasjon om arbeidssøkerens jobbsituasjon
         *
         * @return True if the 'jobbsituasjon' field has an active Builder instance
         */
        public boolean hasJobbsituasjonBuilder() {
            return jobbsituasjonBuilder != null;
        }

        /**
         * Clears the value of the 'jobbsituasjon' field.
         * Informasjon om arbeidssøkerens jobbsituasjon
         *
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder clearJobbsituasjon() {
            jobbsituasjon = null;
            jobbsituasjonBuilder = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'annet' field.
         * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
         * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
         *
         * @return The value.
         */
        public Annet getAnnet() {
            return annet;
        }


        /**
         * Sets the value of the 'annet' field.
         * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
         * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
         *
         * @param value The value of 'annet'.
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder setAnnet(Annet value) {
            validate(fields()[6], value);
            this.annetBuilder = null;
            this.annet = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'annet' field has been set.
         * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
         * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
         *
         * @return True if the 'annet' field has been set, false otherwise.
         */
        public boolean hasAnnet() {
            return fieldSetFlags()[6];
        }

        /**
         * Gets the Builder instance for the 'annet' field and creates one if it doesn't exist yet.
         * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
         * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
         *
         * @return This builder.
         */
        public Annet.Builder getAnnetBuilder() {
            if (annetBuilder == null) {
                if (hasAnnet()) {
                    setAnnetBuilder(Annet.newBuilder(annet));
                } else {
                    setAnnetBuilder(Annet.newBuilder());
                }
            }
            return annetBuilder;
        }

        /**
         * Sets the Builder instance for the 'annet' field
         * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
         * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public OpplysningerOmArbeidssoeker.Builder setAnnetBuilder(Annet.Builder value) {
            clearAnnet();
            annetBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'annet' field has an active Builder instance
         * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
         * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
         *
         * @return True if the 'annet' field has an active Builder instance
         */
        public boolean hasAnnetBuilder() {
            return annetBuilder != null;
        }

        /**
         * Clears the value of the 'annet' field.
         * Er det annen informasjon om arbeidssøker som er relevant for å kunne hjelpe
         * Dersom det ikke var relevant å innhente annen informasjon er dette feltet 'null'.
         *
         * @return This builder.
         */
        public OpplysningerOmArbeidssoeker.Builder clearAnnet() {
            annet = null;
            annetBuilder = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public OpplysningerOmArbeidssoeker build() {
            try {
                OpplysningerOmArbeidssoeker record = new OpplysningerOmArbeidssoeker();
                record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
                record.periodeId = fieldSetFlags()[1] ? this.periodeId : (java.util.UUID) defaultValue(fields()[1]);
                if (sendtInnAvBuilder != null) {
                    try {
                        record.sendtInnAv = this.sendtInnAvBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("sendtInnAv"));
                        throw e;
                    }
                } else {
                    record.sendtInnAv = fieldSetFlags()[2] ? this.sendtInnAv : (Metadata) defaultValue(fields()[2]);
                }
                if (utdanningBuilder != null) {
                    try {
                        record.utdanning = this.utdanningBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("utdanning"));
                        throw e;
                    }
                } else {
                    record.utdanning = fieldSetFlags()[3] ? this.utdanning : (Utdanning) defaultValue(fields()[3]);
                }
                if (helseBuilder != null) {
                    try {
                        record.helse = this.helseBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("helse"));
                        throw e;
                    }
                } else {
                    record.helse = fieldSetFlags()[4] ? this.helse : (Helse) defaultValue(fields()[4]);
                }
                if (jobbsituasjonBuilder != null) {
                    try {
                        record.jobbsituasjon = this.jobbsituasjonBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("jobbsituasjon"));
                        throw e;
                    }
                } else {
                    record.jobbsituasjon = fieldSetFlags()[5] ? this.jobbsituasjon : (Jobbsituasjon) defaultValue(fields()[5]);
                }
                if (annetBuilder != null) {
                    try {
                        record.annet = this.annetBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("annet"));
                        throw e;
                    }
                } else {
                    record.annet = fieldSetFlags()[6] ? this.annet : (Annet) defaultValue(fields()[6]);
                }
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<OpplysningerOmArbeidssoeker>
            WRITER$ = (org.apache.avro.io.DatumWriter<OpplysningerOmArbeidssoeker>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<OpplysningerOmArbeidssoeker>
            READER$ = (org.apache.avro.io.DatumReader<OpplysningerOmArbeidssoeker>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}










