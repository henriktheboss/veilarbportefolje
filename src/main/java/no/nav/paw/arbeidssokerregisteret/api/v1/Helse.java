/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package no.nav.paw.arbeidssokerregisteret.api.v1;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

/**
 * Helse
 */
@org.apache.avro.specific.AvroGenerated
public class Helse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 6271535969450044688L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Helse\",\"namespace\":\"no.nav.paw.arbeidssokerregisteret.api.v1\",\"doc\":\"Helse\",\"fields\":[{\"name\":\"helsetilstandHindrerArbeid\",\"type\":{\"type\":\"enum\",\"name\":\"JaNeiVetIkke\",\"doc\":\"Enkel enum som brukes til typisk 'ja', 'nei' eller 'vet ikke' svar.\",\"symbols\":[\"JA\",\"NEI\",\"VET_IKKE\"]}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<Helse> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Helse> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Helse> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Helse> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Helse> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this Helse to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a Helse from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Helse instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Helse fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private JaNeiVetIkke helsetilstandHindrerArbeid;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Helse() {
    }

    /**
     * All-args constructor.
     *
     * @param helsetilstandHindrerArbeid The new value for helsetilstandHindrerArbeid
     */
    public Helse(JaNeiVetIkke helsetilstandHindrerArbeid) {
        this.helsetilstandHindrerArbeid = helsetilstandHindrerArbeid;
    }

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return helsetilstandHindrerArbeid;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                helsetilstandHindrerArbeid = (JaNeiVetIkke) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'helsetilstandHindrerArbeid' field.
     *
     * @return The value of the 'helsetilstandHindrerArbeid' field.
     */
    public JaNeiVetIkke getHelsetilstandHindrerArbeid() {
        return helsetilstandHindrerArbeid;
    }


    /**
     * Sets the value of the 'helsetilstandHindrerArbeid' field.
     *
     * @param value the value to set.
     */
    public void setHelsetilstandHindrerArbeid(JaNeiVetIkke value) {
        this.helsetilstandHindrerArbeid = value;
    }

    /**
     * Creates a new Helse RecordBuilder.
     *
     * @return A new Helse RecordBuilder
     */
    public static Helse.Builder newBuilder() {
        return new Helse.Builder();
    }

    /**
     * Creates a new Helse RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new Helse RecordBuilder
     */
    public static Helse.Builder newBuilder(Helse.Builder other) {
        if (other == null) {
            return new Helse.Builder();
        } else {
            return new Helse.Builder(other);
        }
    }

    /**
     * Creates a new Helse RecordBuilder by copying an existing Helse instance.
     *
     * @param other The existing instance to copy.
     * @return A new Helse RecordBuilder
     */
    public static Helse.Builder newBuilder(Helse other) {
        if (other == null) {
            return new Helse.Builder();
        } else {
            return new Helse.Builder(other);
        }
    }

    /**
     * RecordBuilder for Helse instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Helse>
            implements org.apache.avro.data.RecordBuilder<Helse> {

        private JaNeiVetIkke helsetilstandHindrerArbeid;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(Helse.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.helsetilstandHindrerArbeid)) {
                this.helsetilstandHindrerArbeid = data().deepCopy(fields()[0].schema(), other.helsetilstandHindrerArbeid);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
        }

        /**
         * Creates a Builder by copying an existing Helse instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(Helse other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.helsetilstandHindrerArbeid)) {
                this.helsetilstandHindrerArbeid = data().deepCopy(fields()[0].schema(), other.helsetilstandHindrerArbeid);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Gets the value of the 'helsetilstandHindrerArbeid' field.
         *
         * @return The value.
         */
        public JaNeiVetIkke getHelsetilstandHindrerArbeid() {
            return helsetilstandHindrerArbeid;
        }


        /**
         * Sets the value of the 'helsetilstandHindrerArbeid' field.
         *
         * @param value The value of 'helsetilstandHindrerArbeid'.
         * @return This builder.
         */
        public Helse.Builder setHelsetilstandHindrerArbeid(JaNeiVetIkke value) {
            validate(fields()[0], value);
            this.helsetilstandHindrerArbeid = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'helsetilstandHindrerArbeid' field has been set.
         *
         * @return True if the 'helsetilstandHindrerArbeid' field has been set, false otherwise.
         */
        public boolean hasHelsetilstandHindrerArbeid() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'helsetilstandHindrerArbeid' field.
         *
         * @return This builder.
         */
        public Helse.Builder clearHelsetilstandHindrerArbeid() {
            helsetilstandHindrerArbeid = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Helse build() {
            try {
                Helse record = new Helse();
                record.helsetilstandHindrerArbeid = fieldSetFlags()[0] ? this.helsetilstandHindrerArbeid : (JaNeiVetIkke) defaultValue(fields()[0]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Helse>
            WRITER$ = (org.apache.avro.io.DatumWriter<Helse>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Helse>
            READER$ = (org.apache.avro.io.DatumReader<Helse>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeEnum(this.helsetilstandHindrerArbeid.ordinal());

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.helsetilstandHindrerArbeid = JaNeiVetIkke.values()[in.readEnum()];

        } else {
            for (int i = 0; i < 1; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.helsetilstandHindrerArbeid = JaNeiVetIkke.values()[in.readEnum()];
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










